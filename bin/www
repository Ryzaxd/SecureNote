#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('securenote:server');
const http = require('http');
const db = require('../models');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Start server after DB is ready
 */
db.sequelize.authenticate()
  .then(() => {
    console.log('✅ DB connection successful');
    return db.sequelize.sync({ alter: false });
  })
  .then(() => {
    console.log('✅ Models synced (no destructive changes LETS GO)');
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch(err => {
    console.error('❌ Sequelize failed to start:', err);
    process.exit(1);
  });

/**
 * Normalize a port
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Error handler
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Listening log
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`🚀 Server is running on http://localhost:${port}`);
}
